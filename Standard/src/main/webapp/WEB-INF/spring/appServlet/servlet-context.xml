<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!--  -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 
		com.gura.standard패키지와 그 하위 패키지를 scan해서
		생성할 객체를 찾아 직접 생성하고 그 생성된 객체의 참조값(bead)을 container에서 관리한다.
		어떤 클래스로 객체를 생성할지의 여부는 어노테이션을 보고 알 수 있다.
		@Controller, @Service, @Repositorym @Component
		해당 클래스로 객체를 생성해서 bean을 container에서 관리하는 구조이다.
		관리란? 필요한 시점에 메소드를 후출하기도 하고, 필요한 곳에 참조값을 직접 넣어주기도 한다.
	 -->
	
	<context:component-scan base-package="com.gura.standard" />
	
	
	
</beans:beans>
